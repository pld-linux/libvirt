--- libvirt-10.2.0/meson.build.orig	2024-04-02 13:38:48.000000000 +0200
+++ libvirt-10.2.0/meson.build	2024-05-01 06:11:02.127427471 +0200
@@ -833,8 +833,10 @@ optional_programs = [
 
 missing_optional_programs = []
 foreach name : optional_programs
+ varname = name.underscorify()
+ prog_path = get_option('@0@_path'.format(varname))
+ if prog_path == ''
   prog = find_program(name, required: false, dirs: libvirt_sbin_path)
-  varname = name.underscorify()
   if prog.found()
     prog_path = prog.full_path()
   else
@@ -843,9 +845,10 @@ foreach name : optional_programs
       missing_optional_programs += [ name ]
     endif
   endif
+ endif
 
   conf.set_quoted(varname.to_upper(), prog_path)
-  set_variable('@0@_prog'.format(varname), prog)
+  set_variable('@0@_path'.format(varname), prog_path)
 endforeach
 
 
@@ -1697,6 +1700,8 @@ if not get_option('driver_qemu').disable
     conf.set_quoted('QEMU_USER', qemu_user)
     conf.set_quoted('QEMU_GROUP', qemu_group)
 
+  qemu_slirp_path = get_option('qemu_slirp_path')
+  if qemu_slirp_path == ''
     qemu_slirp_prog = find_program(
       'slirp-helper',
       dirs: [ '/usr/bin', '/usr/libexec' ],
@@ -1707,6 +1712,7 @@ if not get_option('driver_qemu').disable
     else
       qemu_slirp_path = '/usr/bin/slirp-helper'
     endif
+  endif
     conf.set_quoted('QEMU_SLIRP_HELPER', qemu_slirp_path)
   endif
 endif
@@ -1786,11 +1792,29 @@ if conf.has('WITH_LIBVIRTD')
     endif
 
     if fs_enable
+     mount_path = get_option('mount_path')
+     if mount_path == ''
       mount_prog = find_program('mount', required: get_option('storage_fs'), dirs: libvirt_sbin_path)
+      if mount_prog.found()
+        mount_path = mount_prog.path()
+      endif
+     endif
+     umount_path = get_option('umount_path')
+     if umount_path == ''
       umount_prog = find_program('umount', required: get_option('storage_fs'), dirs: libvirt_sbin_path)
+      if umount_prog.found()
+        umount_path = umount_prog.path()
+      endif
+     endif
+     mkfs_path = get_option('mkfs_path')
+     if mkfs_path == ''
       mkfs_prog = find_program('mkfs', required: get_option('storage_fs'), dirs: libvirt_sbin_path)
+      if mkfs_prog.found()
+        mkfs_path = mkfs_prog.path()
+      endif
+     endif
 
-      if not mount_prog.found() or not umount_prog.found() or not mkfs_prog.found()
+      if mount_path == '' or umount_path == '' or mkfs_path == ''
         fs_enable = false
       endif
     endif
@@ -1799,15 +1823,17 @@ if conf.has('WITH_LIBVIRTD')
       use_storage = true
 
       conf.set('WITH_STORAGE_FS', 1)
-      conf.set_quoted('MOUNT', mount_prog.full_path())
-      conf.set_quoted('UMOUNT', umount_prog.full_path())
-      conf.set_quoted('MKFS', mkfs_prog.full_path())
+      conf.set_quoted('MOUNT', mount_path)
+      conf.set_quoted('UMOUNT', umount_path)
+      conf.set_quoted('MKFS', mkfs_path)
 
+    showmount_path = get_option('showmount_path')
+    if showmount_path == ''
       showmount_prog = find_program('showmount', required: false, dirs: libvirt_sbin_path)
-      showmount_path = ''
       if showmount_prog.found()
         showmount_path = showmount_prog.full_path()
       endif
+    endif
       conf.set_quoted('SHOWMOUNT', showmount_path)
     endif
   endif
@@ -1819,7 +1845,7 @@ if conf.has('WITH_LIBVIRTD')
     error('Need glusterfs (libgfapi) for gluster storage driver')
   endif
 
-  if not get_option('storage_iscsi').disabled() and iscsiadm_prog.found()
+  if not get_option('storage_iscsi').disabled() and iscsiadm_path != ''
     use_storage = true
     conf.set('WITH_STORAGE_ISCSI', 1)
   elif get_option('storage_iscsi').enabled()
@@ -1842,11 +1868,17 @@ if conf.has('WITH_LIBVIRTD')
       'pvs', 'vgs', 'lvs',
     ]
     foreach name : lvm_progs
+      prog_path = get_option('@0@_path'.format(name))
+      if prog_path == ''
+        prog = find_program(name, required: get_option('storage_lvm'), dirs: libvirt_sbin_path)
+        if prog.found()
+          prog_path = prog.path()
+        endif
+      endif
       set_variable(
-        '@0@_prog'.format(name),
-        find_program(name, required: get_option('storage_lvm'), dirs: libvirt_sbin_path)
+        '@0@_path'.format(name), prog_path
       )
-      if not get_variable('@0@_prog'.format(name)).found()
+      if prog_path == ''
         lvm_enable = false
       endif
     endforeach
@@ -1856,7 +1888,7 @@ if conf.has('WITH_LIBVIRTD')
       conf.set('WITH_STORAGE_LVM', 1)
 
       foreach name : lvm_progs
-        conf.set_quoted(name.to_upper(), get_variable('@0@_prog'.format(name)).full_path())
+        conf.set_quoted(name.to_upper(), get_variable('@0@_path'.format(name)))
       endforeach
     endif
   endif
@@ -2007,10 +2039,16 @@ if not get_option('nss').disabled()
 endif
 
 if not get_option('numad').disabled() and numactl_dep.found()
+ numad_path = get_option('numad_path')
+ if numad_path == ''
   numad_prog = find_program('numad', required: get_option('numad'), dirs: libvirt_sbin_path)
   if numad_prog.found()
+    numad_path = numad_prog.full_path()
+  endif
+ endif
+  if numad_path != ''
     conf.set('WITH_NUMAD', 1)
-    conf.set_quoted('NUMAD', numad_prog.full_path())
+    conf.set_quoted('NUMAD', numad_path)
   endif
 elif get_option('numad').enabled()
   error('You must have numactl enabled for numad support.')
--- libvirt-10.4.0/scripts/rpcgen/meson.build.orig	2024-06-08 19:45:31.292144421 +0200
+++ libvirt-10.4.0/scripts/rpcgen/meson.build	2024-06-08 20:36:12.822333704 +0200
@@ -3,7 +3,7 @@ subdir('rpcgen')
 if tests_enabled[0] and xdr_dep.found()
   subdir('tests')
 
-  if pytest_prog.found() and host_machine.system() != 'darwin'
+  if pytest_path != '' and host_machine.system() != 'darwin'
     test(
       'rpcgen-pytest',
       python3_prog,
--- libvirt-9.10.0/src/meson.build.orig	2024-04-05 22:18:26.619433380 +0200
+++ libvirt-9.10.0/src/meson.build	2024-04-06 08:12:28.779676565 +0200
@@ -1029,11 +1029,11 @@ if tests_enabled[0]
     suite: 'script'
   )
 
-  if augparse_prog.found()
+  if find_program('augparse', required: false).found()
     foreach data : augeas_test_data
       test(
         'check-augeas-@0@'.format(data['name']),
-        augparse_prog,
+        find_program('augparse'),
         args: [
           '-I', data['srcdir'],
           '-I', data['builddir'],
@@ -1044,7 +1044,7 @@ if tests_enabled[0]
     endforeach
   endif
 
-  if pdwtags_prog.found() and cc.get_id() != 'clang'
+  if pdwtags_path != '' and cc.get_id() != 'clang'
     foreach proto : check_protocols
       lib = proto['lib']
       test(
@@ -1055,7 +1055,7 @@ if tests_enabled[0]
           proto['name'],
           lib.name(),
           lib.full_path(),
-          pdwtags_prog.full_path(),
+          pdwtags_path,
           files('@0@-structs'.format(proto['name'])),
         ],
         env: runutf8,
--- libvirt-10.4.0/meson_options.txt.orig	2024-06-08 19:45:31.292144421 +0200
+++ libvirt-10.4.0/meson_options.txt	2024-06-08 20:37:08.235366839 +0200
@@ -133,3 +133,50 @@ option('sysctl_config', type: 'feature',
 # dep:sysctl_config
 option('userfaultfd_sysctl', type: 'feature', value: 'auto', description: 'Whether to install sysctl config for enabling unprivileged userfaultfd')
 option('tls_priority', type: 'string', value: 'NORMAL', description: 'set the default TLS session priority string')
+
+option('addr2line_path', type: 'string', value: '', description: 'executable path')
+option('augparse_path', type: 'string', value: '', description: 'executable path')
+option('black_path', type: 'string', value: '', description: 'executable path')
+option('dmidecode_path', type: 'string', value: '', description: 'executable path')
+option('dnsmasq_path', type: 'string', value: '', description: 'executable path')
+option('ebtables_path', type: 'string', value: '', description: 'executable path')
+option('flake8_path', type: 'string', value: '', description: 'executable path')
+option('ip6tables_path', type: 'string', value: '', description: 'executable path')
+option('ip_path', type: 'string', value: '', description: 'executable path')
+option('iptables_path', type: 'string', value: '', description: 'executable path')
+option('iscsiadm_path', type: 'string', value: '', description: 'executable path')
+option('lvchange_path', type: 'string', value: '', description: 'executable path')
+option('lvcreate_path', type: 'string', value: '', description: 'executable path')
+option('lvremove_path', type: 'string', value: '', description: 'executable path')
+option('lvs_path', type: 'string', value: '', description: 'executable path')
+option('mdevctl_path', type: 'string', value: '', description: 'executable path')
+option('mkfs_path', type: 'string', value: '', description: 'executable path')
+option('mm_ctl_path', type: 'string', value: '', description: 'executable path')
+option('modprobe_path', type: 'string', value: '', description: 'executable path')
+option('mount_path', type: 'string', value: '', description: 'executable path')
+option('numad_path', type: 'string', value: '', description: 'executable path')
+option('ovs_vsctl_path', type: 'string', value: '', description: 'executable path')
+option('parted_path', type: 'string', value: '', description: 'executable path')
+option('passt_path', type: 'string', value: '', description: 'executable path')
+option('pdwtags_path', type: 'string', value: '', description: 'executable path')
+option('pvcreate_path', type: 'string', value: '', description: 'executable path')
+option('pvremove_path', type: 'string', value: '', description: 'executable path')
+option('pvs_path', type: 'string', value: '', description: 'executable path')
+option('pytest_path', type: 'string', value: '', description: 'executable path')
+option('qemu_slirp_path', type: 'string', value: '', description: 'executable path')
+option('radvd_path', type: 'string', value: '', description: 'executable path')
+option('rmmod_path', type: 'string', value: '', description: 'executable path')
+option('scrub_path', type: 'string', value: '', description: 'executable path')
+option('showmount_path', type: 'string', value: '', description: 'executable path')
+option('tc_path', type: 'string', value: '', description: 'executable path')
+option('udevadm_path', type: 'string', value: '', description: 'executable path')
+option('umount_path', type: 'string', value: '', description: 'executable path')
+option('vgchange_path', type: 'string', value: '', description: 'executable path')
+option('vgcreate_path', type: 'string', value: '', description: 'executable path')
+option('vgremove_path', type: 'string', value: '', description: 'executable path')
+option('vgs_path', type: 'string', value: '', description: 'executable path')
+option('vgscan_path', type: 'string', value: '', description: 'executable path')
+option('vstorage_path', type: 'string', value: '', description: 'executable path')
+option('vstorage_mount_path', type: 'string', value: '', description: 'executable path')
+option('zfs_path', type: 'string', value: '', description: 'executable path')
+option('zpool_path', type: 'string', value: '', description: 'executable path')
